package com.fise.marechat.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fise.marechat.bean.dao.MessagePhrase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_PHRASE".
*/
public class MessagePhraseDao extends AbstractDao<MessagePhrase, Long> {

    public static final String TABLENAME = "MESSAGE_PHRASE";

    /**
     * Properties of entity MessagePhrase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message_phrase_id = new Property(1, long.class, "message_phrase_id", false, "MESSAGE_PHRASE_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time = new Property(3, long.class, "time", false, "TIME");
        public final static Property Message_sourceFrom = new Property(4, String.class, "message_sourceFrom", false, "MESSAGE_SOURCE_FROM");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
    }

    private Query<MessagePhrase> phoneBook_PhraseSettingsQuery;

    public MessagePhraseDao(DaoConfig config) {
        super(config);
    }
    
    public MessagePhraseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_PHRASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_PHRASE_ID\" INTEGER NOT NULL ," + // 1: message_phrase_id
                "\"DATE\" TEXT," + // 2: date
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"MESSAGE_SOURCE_FROM\" TEXT," + // 4: message_sourceFrom
                "\"CONTENT\" TEXT);"); // 5: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_PHRASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessagePhrase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessage_phrase_id());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getTime());
 
        String message_sourceFrom = entity.getMessage_sourceFrom();
        if (message_sourceFrom != null) {
            stmt.bindString(5, message_sourceFrom);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessagePhrase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessage_phrase_id());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getTime());
 
        String message_sourceFrom = entity.getMessage_sourceFrom();
        if (message_sourceFrom != null) {
            stmt.bindString(5, message_sourceFrom);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessagePhrase readEntity(Cursor cursor, int offset) {
        MessagePhrase entity = new MessagePhrase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // message_phrase_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message_sourceFrom
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessagePhrase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage_phrase_id(cursor.getLong(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setMessage_sourceFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessagePhrase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessagePhrase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessagePhrase entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phraseSettings" to-many relationship of PhoneBook. */
    public List<MessagePhrase> _queryPhoneBook_PhraseSettings(long message_phrase_id) {
        synchronized (this) {
            if (phoneBook_PhraseSettingsQuery == null) {
                QueryBuilder<MessagePhrase> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Message_phrase_id.eq(null));
                phoneBook_PhraseSettingsQuery = queryBuilder.build();
            }
        }
        Query<MessagePhrase> query = phoneBook_PhraseSettingsQuery.forCurrentThread();
        query.setParameter(0, message_phrase_id);
        return query.list();
    }

}
