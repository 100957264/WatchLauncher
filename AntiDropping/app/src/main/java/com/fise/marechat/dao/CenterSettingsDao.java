package com.fise.marechat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fise.marechat.bean.dao.CenterSettings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CENTER_SETTINGS".
*/
public class CenterSettingsDao extends AbstractDao<CenterSettings, Long> {

    public static final String TABLENAME = "CENTER_SETTINGS";

    /**
     * Properties of entity CenterSettings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property CenterPhoneNum = new Property(2, String.class, "centerPhoneNum", false, "CENTER_PHONE_NUM");
        public final static Property Upload_interval = new Property(3, String.class, "upload_interval", false, "UPLOAD_INTERVAL");
        public final static Property CenterPwd = new Property(4, String.class, "centerPwd", false, "CENTER_PWD");
        public final static Property SosPhone = new Property(5, String.class, "sosPhone", false, "SOS_PHONE");
        public final static Property SosPhone2 = new Property(6, String.class, "sosPhone2", false, "SOS_PHONE2");
        public final static Property Center_ip = new Property(7, String.class, "center_ip", false, "ip");
        public final static Property Center_port = new Property(8, String.class, "center_port", false, "port");
    }


    public CenterSettingsDao(DaoConfig config) {
        super(config);
    }
    
    public CenterSettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CENTER_SETTINGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"IMEI\" TEXT," + // 1: imei
                "\"CENTER_PHONE_NUM\" TEXT," + // 2: centerPhoneNum
                "\"UPLOAD_INTERVAL\" TEXT," + // 3: upload_interval
                "\"CENTER_PWD\" TEXT," + // 4: centerPwd
                "\"SOS_PHONE\" TEXT," + // 5: sosPhone
                "\"SOS_PHONE2\" TEXT," + // 6: sosPhone2
                "\"ip\" TEXT," + // 7: center_ip
                "\"port\" TEXT);"); // 8: center_port
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CENTER_SETTINGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CenterSettings entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String centerPhoneNum = entity.getCenterPhoneNum();
        if (centerPhoneNum != null) {
            stmt.bindString(3, centerPhoneNum);
        }
 
        String upload_interval = entity.getUpload_interval();
        if (upload_interval != null) {
            stmt.bindString(4, upload_interval);
        }
 
        String centerPwd = entity.getCenterPwd();
        if (centerPwd != null) {
            stmt.bindString(5, centerPwd);
        }
 
        String sosPhone = entity.getSosPhone();
        if (sosPhone != null) {
            stmt.bindString(6, sosPhone);
        }
 
        String sosPhone2 = entity.getSosPhone2();
        if (sosPhone2 != null) {
            stmt.bindString(7, sosPhone2);
        }
 
        String center_ip = entity.getCenter_ip();
        if (center_ip != null) {
            stmt.bindString(8, center_ip);
        }
 
        String center_port = entity.getCenter_port();
        if (center_port != null) {
            stmt.bindString(9, center_port);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CenterSettings entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String centerPhoneNum = entity.getCenterPhoneNum();
        if (centerPhoneNum != null) {
            stmt.bindString(3, centerPhoneNum);
        }
 
        String upload_interval = entity.getUpload_interval();
        if (upload_interval != null) {
            stmt.bindString(4, upload_interval);
        }
 
        String centerPwd = entity.getCenterPwd();
        if (centerPwd != null) {
            stmt.bindString(5, centerPwd);
        }
 
        String sosPhone = entity.getSosPhone();
        if (sosPhone != null) {
            stmt.bindString(6, sosPhone);
        }
 
        String sosPhone2 = entity.getSosPhone2();
        if (sosPhone2 != null) {
            stmt.bindString(7, sosPhone2);
        }
 
        String center_ip = entity.getCenter_ip();
        if (center_ip != null) {
            stmt.bindString(8, center_ip);
        }
 
        String center_port = entity.getCenter_port();
        if (center_port != null) {
            stmt.bindString(9, center_port);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CenterSettings readEntity(Cursor cursor, int offset) {
        CenterSettings entity = new CenterSettings( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // centerPhoneNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // upload_interval
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // centerPwd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sosPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sosPhone2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // center_ip
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // center_port
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CenterSettings entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCenterPhoneNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpload_interval(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCenterPwd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSosPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSosPhone2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCenter_ip(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCenter_port(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CenterSettings entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CenterSettings entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CenterSettings entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
