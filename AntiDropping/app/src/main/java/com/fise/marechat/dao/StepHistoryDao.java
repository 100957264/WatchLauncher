package com.fise.marechat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fise.marechat.bean.dao.StepHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_HISTORY".
*/
public class StepHistoryDao extends AbstractDao<StepHistory, Long> {

    public static final String TABLENAME = "STEP_HISTORY";

    /**
     * Properties of entity StepHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Step_count = new Property(4, long.class, "step_count", false, "STEP_COUNT");
        public final static Property Step_energy = new Property(5, long.class, "step_energy", false, "STEP_ENERGY");
    }


    public StepHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public StepHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"IMEI\" TEXT," + // 1: imei
                "\"DATE\" TEXT," + // 2: date
                "\"TIME\" TEXT," + // 3: time
                "\"STEP_COUNT\" INTEGER NOT NULL ," + // 4: step_count
                "\"STEP_ENERGY\" INTEGER NOT NULL );"); // 5: step_energy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepHistory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getStep_count());
        stmt.bindLong(6, entity.getStep_energy());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepHistory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getStep_count());
        stmt.bindLong(6, entity.getStep_energy());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public StepHistory readEntity(Cursor cursor, int offset) {
        StepHistory entity = new StepHistory( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.getLong(offset + 4), // step_count
            cursor.getLong(offset + 5) // step_energy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepHistory entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStep_count(cursor.getLong(offset + 4));
        entity.setStep_energy(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepHistory entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
