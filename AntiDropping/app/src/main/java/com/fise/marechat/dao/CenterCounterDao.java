package com.fise.marechat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fise.marechat.util.DaoStringConverter;
import java.util.List;

import com.fise.marechat.bean.dao.CenterCounter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CENTER_COUNTER".
*/
public class CenterCounterDao extends AbstractDao<CenterCounter, Long> {

    public static final String TABLENAME = "CENTER_COUNTER";

    /**
     * Properties of entity CenterCounter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property StepCounter = new Property(2, int.class, "stepCounter", false, "STEP_COUNTER");
        public final static Property Step_time = new Property(3, String.class, "step_time", false, "STEP_TIME");
        public final static Property Flip_check_time = new Property(4, String.class, "flip_check_time", false, "FLIP_CHECK_TIME");
        public final static Property Dnd_times = new Property(5, String.class, "dnd_times", false, "DND_TIMES");
    }

    private final DaoStringConverter step_timeConverter = new DaoStringConverter();
    private final DaoStringConverter dnd_timesConverter = new DaoStringConverter();

    public CenterCounterDao(DaoConfig config) {
        super(config);
    }
    
    public CenterCounterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CENTER_COUNTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"IMEI\" TEXT," + // 1: imei
                "\"STEP_COUNTER\" INTEGER NOT NULL ," + // 2: stepCounter
                "\"STEP_TIME\" TEXT," + // 3: step_time
                "\"FLIP_CHECK_TIME\" TEXT," + // 4: flip_check_time
                "\"DND_TIMES\" TEXT);"); // 5: dnd_times
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CENTER_COUNTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CenterCounter entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindLong(3, entity.getStepCounter());
 
        List step_time = entity.getStep_time();
        if (step_time != null) {
            stmt.bindString(4, step_timeConverter.convertToDatabaseValue(step_time));
        }
 
        String flip_check_time = entity.getFlip_check_time();
        if (flip_check_time != null) {
            stmt.bindString(5, flip_check_time);
        }
 
        List dnd_times = entity.getDnd_times();
        if (dnd_times != null) {
            stmt.bindString(6, dnd_timesConverter.convertToDatabaseValue(dnd_times));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CenterCounter entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindLong(3, entity.getStepCounter());
 
        List step_time = entity.getStep_time();
        if (step_time != null) {
            stmt.bindString(4, step_timeConverter.convertToDatabaseValue(step_time));
        }
 
        String flip_check_time = entity.getFlip_check_time();
        if (flip_check_time != null) {
            stmt.bindString(5, flip_check_time);
        }
 
        List dnd_times = entity.getDnd_times();
        if (dnd_times != null) {
            stmt.bindString(6, dnd_timesConverter.convertToDatabaseValue(dnd_times));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CenterCounter readEntity(Cursor cursor, int offset) {
        CenterCounter entity = new CenterCounter( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.getInt(offset + 2), // stepCounter
            cursor.isNull(offset + 3) ? null : step_timeConverter.convertToEntityProperty(cursor.getString(offset + 3)), // step_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flip_check_time
            cursor.isNull(offset + 5) ? null : dnd_timesConverter.convertToEntityProperty(cursor.getString(offset + 5)) // dnd_times
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CenterCounter entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStepCounter(cursor.getInt(offset + 2));
        entity.setStep_time(cursor.isNull(offset + 3) ? null : step_timeConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setFlip_check_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDnd_times(cursor.isNull(offset + 5) ? null : dnd_timesConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CenterCounter entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CenterCounter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CenterCounter entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
