package com.fise.marechat.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fise.marechat.bean.dao.PhoneContractor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE_CONTRACTOR".
*/
public class PhoneContractorDao extends AbstractDao<PhoneContractor, Long> {

    public static final String TABLENAME = "PHONE_CONTRACTOR";

    /**
     * Properties of entity PhoneContractor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property Phone_contactor_id = new Property(2, long.class, "phone_contactor_id", false, "PHONE_CONTACTOR_ID");
        public final static Property Phone_contactor_name = new Property(3, String.class, "phone_contactor_name", false, "PHONE_CONTACTOR_NAME");
        public final static Property Phone_contactor_num = new Property(4, String.class, "phone_contactor_num", false, "PHONE_CONTACTOR_NUM");
        public final static Property Phone_contactor_nick = new Property(5, String.class, "phone_contactor_nick", false, "PHONE_CONTACTOR_NICK");
    }

    private Query<PhoneContractor> phoneBook_PhoneContactorsQuery;

    public PhoneContractorDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneContractorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_CONTRACTOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"IMEI\" TEXT," + // 1: imei
                "\"PHONE_CONTACTOR_ID\" INTEGER NOT NULL ," + // 2: phone_contactor_id
                "\"PHONE_CONTACTOR_NAME\" TEXT," + // 3: phone_contactor_name
                "\"PHONE_CONTACTOR_NUM\" TEXT," + // 4: phone_contactor_num
                "\"PHONE_CONTACTOR_NICK\" TEXT);"); // 5: phone_contactor_nick
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_CONTRACTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhoneContractor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindLong(3, entity.getPhone_contactor_id());
 
        String phone_contactor_name = entity.getPhone_contactor_name();
        if (phone_contactor_name != null) {
            stmt.bindString(4, phone_contactor_name);
        }
 
        String phone_contactor_num = entity.getPhone_contactor_num();
        if (phone_contactor_num != null) {
            stmt.bindString(5, phone_contactor_num);
        }
 
        String phone_contactor_nick = entity.getPhone_contactor_nick();
        if (phone_contactor_nick != null) {
            stmt.bindString(6, phone_contactor_nick);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhoneContractor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindLong(3, entity.getPhone_contactor_id());
 
        String phone_contactor_name = entity.getPhone_contactor_name();
        if (phone_contactor_name != null) {
            stmt.bindString(4, phone_contactor_name);
        }
 
        String phone_contactor_num = entity.getPhone_contactor_num();
        if (phone_contactor_num != null) {
            stmt.bindString(5, phone_contactor_num);
        }
 
        String phone_contactor_nick = entity.getPhone_contactor_nick();
        if (phone_contactor_nick != null) {
            stmt.bindString(6, phone_contactor_nick);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PhoneContractor readEntity(Cursor cursor, int offset) {
        PhoneContractor entity = new PhoneContractor( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.getLong(offset + 2), // phone_contactor_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone_contactor_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone_contactor_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // phone_contactor_nick
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhoneContractor entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone_contactor_id(cursor.getLong(offset + 2));
        entity.setPhone_contactor_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone_contactor_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone_contactor_nick(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhoneContractor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhoneContractor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhoneContractor entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phoneContactors" to-many relationship of PhoneBook. */
    public List<PhoneContractor> _queryPhoneBook_PhoneContactors(long phone_contactor_id) {
        synchronized (this) {
            if (phoneBook_PhoneContactorsQuery == null) {
                QueryBuilder<PhoneContractor> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Phone_contactor_id.eq(null));
                phoneBook_PhoneContactorsQuery = queryBuilder.build();
            }
        }
        Query<PhoneContractor> query = phoneBook_PhoneContactorsQuery.forCurrentThread();
        query.setParameter(0, phone_contactor_id);
        return query.list();
    }

}
