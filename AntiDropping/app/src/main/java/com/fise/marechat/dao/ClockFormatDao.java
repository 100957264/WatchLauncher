package com.fise.marechat.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fise.marechat.bean.dao.ClockFormat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOCK_FORMAT".
*/
public class ClockFormatDao extends AbstractDao<ClockFormat, Long> {

    public static final String TABLENAME = "CLOCK_FORMAT";

    /**
     * Properties of entity ClockFormat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Clock_id = new Property(1, long.class, "clock_id", false, "CLOCK_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Clock_switch = new Property(4, int.class, "clock_switch", false, "CLOCK_SWITCH");
        public final static Property Clock_style = new Property(5, int.class, "clock_style", false, "CLOCK_STYLE");
        public final static Property Clock_day = new Property(6, int.class, "clock_day", false, "CLOCK_DAY");
        public final static Property Clock_time_string = new Property(7, String.class, "clock_time_string", false, "CLOCK_TIME_STRING");
    }

    private Query<ClockFormat> centerClock_ClocksQuery;

    public ClockFormatDao(DaoConfig config) {
        super(config);
    }
    
    public ClockFormatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOCK_FORMAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLOCK_ID\" INTEGER NOT NULL ," + // 1: clock_id
                "\"DATE\" TEXT," + // 2: date
                "\"TIME\" TEXT," + // 3: time
                "\"CLOCK_SWITCH\" INTEGER NOT NULL ," + // 4: clock_switch
                "\"CLOCK_STYLE\" INTEGER NOT NULL ," + // 5: clock_style
                "\"CLOCK_DAY\" INTEGER NOT NULL ," + // 6: clock_day
                "\"CLOCK_TIME_STRING\" TEXT);"); // 7: clock_time_string
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOCK_FORMAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClockFormat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClock_id());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getClock_switch());
        stmt.bindLong(6, entity.getClock_style());
        stmt.bindLong(7, entity.getClock_day());
 
        String clock_time_string = entity.getClock_time_string();
        if (clock_time_string != null) {
            stmt.bindString(8, clock_time_string);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClockFormat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClock_id());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getClock_switch());
        stmt.bindLong(6, entity.getClock_style());
        stmt.bindLong(7, entity.getClock_day());
 
        String clock_time_string = entity.getClock_time_string();
        if (clock_time_string != null) {
            stmt.bindString(8, clock_time_string);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClockFormat readEntity(Cursor cursor, int offset) {
        ClockFormat entity = new ClockFormat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // clock_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.getInt(offset + 4), // clock_switch
            cursor.getInt(offset + 5), // clock_style
            cursor.getInt(offset + 6), // clock_day
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // clock_time_string
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClockFormat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClock_id(cursor.getLong(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClock_switch(cursor.getInt(offset + 4));
        entity.setClock_style(cursor.getInt(offset + 5));
        entity.setClock_day(cursor.getInt(offset + 6));
        entity.setClock_time_string(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClockFormat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClockFormat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClockFormat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "clocks" to-many relationship of CenterClock. */
    public List<ClockFormat> _queryCenterClock_Clocks(long clock_id) {
        synchronized (this) {
            if (centerClock_ClocksQuery == null) {
                QueryBuilder<ClockFormat> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Clock_id.eq(null));
                centerClock_ClocksQuery = queryBuilder.build();
            }
        }
        Query<ClockFormat> query = centerClock_ClocksQuery.forCurrentThread();
        query.setParameter(0, clock_id);
        return query.list();
    }

}
