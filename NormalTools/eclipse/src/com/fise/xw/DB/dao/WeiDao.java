package com.fise.xw.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fise.xw.DB.entity.UserEntity;
import com.fise.xw.DB.entity.WeiEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
  
/*
 * 位友请求表
 */

public class WeiDao extends AbstractDao<WeiEntity, Long> {

    public static final String TABLENAME = "WeiReqInfo";
 
    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property from_id = new Property(1, int.class, "from_id", false, "FROM_ID");
        public final static Property to_id = new Property(2, int.class, "to_id", false, "TO_ID");
        public final static Property act_id = new Property(3, int.class, "act_id", false, "ACT_ID");
        public final static Property act_type = new Property(4, int.class, "act_type", false, "ACT_TYPE");
        public final static Property status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property updated = new Property(6, int.class, "updated", false, "UPDATED");
        public final static Property masgData = new Property(7, String.class, "masgData", false, "MASGDATA");
        
    };
 
    public WeiDao(DaoConfig config) {
        super(config);
    }
    
    public WeiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WeiReqInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FROM_ID' INTEGER NOT NULL UNIQUE ," + // 1: from_id
                "'TO_ID' INTEGER NOT NULL ," + // 2: to_id
                "'ACT_ID' INTEGER NOT NULL ," + // 3: act_id
                "'ACT_TYPE' INTEGER NOT NULL ," + // 4: act_type
                "'STATUS' INTEGER NOT NULL ," + // 5: status 
                "'UPDATED' INTEGER NOT NULL ," + // 6: updated 
        		"'MASGDATA' TEXT NOT NULL );");  // 7: masgData
        
        
        // Add Indexes 
        db.execSQL("CREATE INDEX " + constraint + "IDX_WeiReqInfo_PEER_ID ON WeiReqInfo" +
                " (FROM_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WeiReqInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WeiEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFromId());
        stmt.bindLong(3, entity.getToId()); 
        stmt.bindLong(4, entity.getActId()); 
        stmt.bindLong(5, entity.getActType()); 
        stmt.bindLong(6, entity.getStatus()); 
        stmt.bindLong(7, entity.getUpdated()); 
        stmt.bindString(8, entity.getMasgData()); 
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WeiEntity readEntity(Cursor cursor, int offset) {
    	WeiEntity entity = new WeiEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // FromId
            cursor.getInt(offset + 2), // ToId
            cursor.getInt(offset + 3), // ActId
            cursor.getInt(offset + 4), // ActType
            cursor.getInt(offset + 5), // Status
            cursor.getInt(offset + 6), // Updated 
            cursor.getString(offset + 7) // data 
        );
         
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WeiEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromId(cursor.getInt(offset + 1)); 
        entity.setToId(cursor.getInt(offset + 2)); 
        entity.setActId(cursor.getInt(offset + 3)); 
        entity.setActType(cursor.getInt(offset + 4)); 
        entity.setStatus(cursor.getInt(offset + 5)); 
        entity.setUpdated(cursor.getInt(offset + 6)); 
        entity.setMasgData(cursor.getString(offset + 7)); 
        
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WeiEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WeiEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
     
}
