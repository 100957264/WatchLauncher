package com.fise.xw.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.fise.xw.DB.entity.GroupVersion;
import com.fise.xw.DB.entity.WeiEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * 群的版本信息表
*/

public class GroupVersionDao extends AbstractDao<GroupVersion, Long> {

    public static final String TABLENAME = "GroupVersion";
 
    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property groupId = new Property(1, int.class, "group_id", false, "GROUP_ID");
        public final static Property type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property version = new Property(3, int.class, "version", false, "VERSION");
        public final static Property stats = new Property(4, int.class, "stats", false, "STATS"); 
      
    };
 

    public GroupVersionDao(DaoConfig config) {
        super(config);
    }
    
    public GroupVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GroupVersion' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GROUP_ID' INTEGER NOT NULL UNIQUE ," + // 1: GROUP_ID
                "'TYPE' INTEGER NOT NULL ," + // 2: TYPE
                "'VERSION' INTEGER NOT NULL ," + // 3: VERSION 
        		"'STATS' INTEGER NOT NULL );");  // 6: STATS
        // Add Indexes 
        db.execSQL("CREATE INDEX " + constraint + "IDX_GroupVersion_GROUP_ID ON GroupVersion" +
                " (GROUP_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GroupVersion'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupVersion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroupId());
        stmt.bindLong(3, entity.getType()); 
        stmt.bindLong(4, entity.getVersion()); 
        stmt.bindLong(5, entity.getStats());  
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupVersion readEntity(Cursor cursor, int offset) {
    	GroupVersion entity = new GroupVersion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // version
            cursor.getInt(offset + 4) // stats
        );
         
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupVersion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.getInt(offset + 1)); 
        entity.setType(cursor.getInt(offset + 2)); 
        entity.setVersion(cursor.getInt(offset + 3)); 
        entity.setStats(cursor.getInt(offset + 4));  
        
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupVersion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupVersion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
     
}
