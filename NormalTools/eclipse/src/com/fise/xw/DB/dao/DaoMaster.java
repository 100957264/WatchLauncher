package com.fise.xw.DB.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;
 
import com.fise.xw.DB.dao.UserDao;
import com.fise.xw.DB.dao.GroupDao;
import com.fise.xw.DB.dao.MessageDao;
import com.fise.xw.DB.dao.SessionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 12): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 12;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) { 
        UserDao.createTable(db, ifNotExists);
        GroupDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        SessionDao.createTable(db, ifNotExists);
        ReqFriendsDao.createTable(db, ifNotExists);
        WeiDao.createTable(db, ifNotExists);
        UserFriendsDao.createTable(db, ifNotExists);
        
        FriendsDao.createTable(db, ifNotExists);
        WeiFriendsDao.createTable(db, ifNotExists);
        RelationsUserDao.createTable(db, ifNotExists);
        DeviceDao.createTable(db, ifNotExists);
        GroupWeiDao.createTable(db, ifNotExists);
        AuthUserDao.createTable(db, ifNotExists);
        WhiteListDao.createTable(db, ifNotExists);
        AlarmDao.createTable(db, ifNotExists);
        DeviceConfigureDao.createTable(db, ifNotExists);
        ElectricFenceDao.createTable(db, ifNotExists);
        ReqMessageDao.createTable(db, ifNotExists);
        GroupVersionDao.createTable(db, ifNotExists);
        BlackListDao.createTable(db, ifNotExists);
        
        DeviceTrajectoryDao.createTable(db, ifNotExists);
        SystemConfigDao.createTable(db, ifNotExists);
        GroupNickDao.createTable(db, ifNotExists);
        
        FamilyConcernDao.createTable(db, ifNotExists);
        TaskDao.createTable(db, ifNotExists);
        
       // MonitorUserDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) { 
        UserDao.dropTable(db, ifExists);
        GroupDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        SessionDao.dropTable(db, ifExists);
        ReqFriendsDao.dropTable(db, ifExists);
        WeiDao.dropTable(db, ifExists);
        UserFriendsDao.dropTable(db, ifExists);
        
        FriendsDao.dropTable(db, ifExists);
        WeiFriendsDao.dropTable(db, ifExists);
        RelationsUserDao.dropTable(db, ifExists);
        DeviceDao.dropTable(db, ifExists);
        GroupWeiDao.dropTable(db, ifExists);
        AuthUserDao.dropTable(db, ifExists);
        WhiteListDao.dropTable(db, ifExists);
        AlarmDao.dropTable(db, ifExists);
        DeviceConfigureDao.dropTable(db, ifExists);
        ElectricFenceDao.dropTable(db, ifExists);
        ReqMessageDao.dropTable(db, ifExists);
        GroupVersionDao.dropTable(db, ifExists);
        BlackListDao.dropTable(db, ifExists);
        DeviceTrajectoryDao.dropTable(db, ifExists);
        SystemConfigDao.dropTable(db, ifExists);
        
        GroupNickDao.dropTable(db, ifExists);
        
        FamilyConcernDao.dropTable(db, ifExists);
        TaskDao.dropTable(db, ifExists);
       // MonitorUserDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION); 
        registerDaoClass(UserDao.class);
        registerDaoClass(GroupDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(SessionDao.class);
        registerDaoClass(ReqFriendsDao.class);
        registerDaoClass(WeiDao.class);
        registerDaoClass(UserFriendsDao.class);
        
        registerDaoClass(FriendsDao.class);
        registerDaoClass(WeiFriendsDao.class);
        registerDaoClass(RelationsUserDao.class);
        registerDaoClass(DeviceDao.class);
        registerDaoClass(GroupWeiDao.class);
        registerDaoClass(AuthUserDao.class);
        registerDaoClass(WhiteListDao.class);
        registerDaoClass(AlarmDao.class);
        registerDaoClass(DeviceConfigureDao.class); 
        registerDaoClass(ElectricFenceDao.class);
        registerDaoClass(DeviceTrajectoryDao.class);
        registerDaoClass(SystemConfigDao.class);
         
        registerDaoClass(ReqMessageDao.class);
        registerDaoClass(GroupVersionDao.class);
        
        registerDaoClass(BlackListDao.class);
        registerDaoClass(GroupNickDao.class);
        
        registerDaoClass(FamilyConcernDao.class);
        registerDaoClass(TaskDao.class);
      //  registerDaoClass(MonitorUserDao.class); 
         
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
