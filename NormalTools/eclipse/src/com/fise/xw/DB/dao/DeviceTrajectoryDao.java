package com.fise.xw.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.fise.xw.DB.entity.DeviceTrajectory;
import com.fise.xw.DB.entity.GroupEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/*
 * 
 */

public class DeviceTrajectoryDao extends AbstractDao<DeviceTrajectory, Long> {

    public static final String TABLENAME = "DeviceTrajectory";

    /**
     * Properties of entity GroupEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
    	public final static Property id = new Property(0, Long.class, "id", true, "_id");
        public final static Property action_id = new Property(1, Long.class, "action_id", true, "_action_id");
        public final static Property device_id = new Property(2, int.class, "device_id", false, "_device_id");
        public final static Property action_type = new Property(3, int.class, "action_type", false, "_action_type");
        public final static Property action_value = new Property(4, int.class, "action_value", false, "_action_value");
        public final static Property action_param = new Property(5, String.class, "action_param", false, "_action_param");
        public final static Property status = new Property(6, int.class, "status", false, "_status");
        public final static Property updated      = new Property(7, int.class, "updated", false, "_updated");  
        public final static Property last_updated      = new Property(8, int.class, "last_updated", false, "_last_updated");
        
        public final static Property Lng      = new Property(9, String.class, "Lng", false, "LNG");
        public final static Property Lat      = new Property(10, String.class, "Lat", false, "LAT");
        public final static Property Param      = new Property(11, String.class, "Param", false, "PARAM");
        
    };


    public DeviceTrajectoryDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceTrajectoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DeviceTrajectory' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'_action_id' INTEGER NOT NULL UNIQUE ," + // 1: _action_id
                "'_device_id' INTEGER NOT NULL ," + // 2: _device_id
                "'_action_type' INTEGER NOT NULL ," + // 3: _action_type
                "'_action_value' INTEGER NOT NULL ," + // 4: _action_value
                "'_action_param' TEXT NOT NULL ," + // 5: _action_param
                "'_status' INTEGER NOT NULL ," + // 6: _status
                "'_updated' INTEGER NOT NULL ," + // 7: updated 
                "'_last_updated' INTEGER NOT NULL ," + // 8: last_updated 
                "'LNG' TEXT NOT NULL ," + // 9: lng 
                "'LAT' TEXT NOT NULL ," + // 10: lat
                "'PARAM' TEXT NOT NULL );"); // 11: Param
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DeviceTrajectory'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeviceTrajectory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getActionId());
        stmt.bindLong(3, entity.getDeviceId());
        stmt.bindLong(4, entity.getActionType());
        stmt.bindLong(5, entity.getActionValue());
        stmt.bindString(6, entity.getActionParam());
        stmt.bindLong(7, entity.getStatus());
        stmt.bindLong(8, entity.getUpdated());
        stmt.bindLong(9, entity.getLastUpdated()); 
        stmt.bindString(10, entity.getLng());
        stmt.bindString(11, entity.getLat());
        stmt.bindString(12, entity.getParam());
         
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeviceTrajectory readEntity(Cursor cursor, int offset) {
    	DeviceTrajectory entity = new DeviceTrajectory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // peerId
            cursor.getInt(offset + 2), // groupType
            cursor.getInt(offset + 3), // mainName
            cursor.getInt(offset + 4), // avatar
            cursor.getString(offset + 5), // creatorId
            cursor.getInt(offset + 6), // userCnt
            cursor.getInt(offset + 7), // userList
            cursor.getInt(offset + 8), // version 
            cursor.getString(offset + 9), //  
            cursor.getString(offset + 10), //  
            cursor.getString(offset + 11) //  
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeviceTrajectory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActionId(cursor.getInt(offset + 1));
        entity.setDeviceId(cursor.getInt(offset + 2));
        entity.setActionType(cursor.getInt(offset + 3));
        entity.setActionValue(cursor.getInt(offset + 4));
        entity.setActionParam(cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setUpdated(cursor.getInt(offset + 7));
        entity.setLastUpdated(cursor.getInt(offset + 8)); 
        
        entity.setLng(cursor.getString(offset + 9)); 
        entity.setLat(cursor.getString(offset + 10)); 
        
        entity.setParam(cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DeviceTrajectory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DeviceTrajectory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
