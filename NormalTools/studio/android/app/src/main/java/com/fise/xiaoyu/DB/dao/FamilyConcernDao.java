package com.fise.xiaoyu.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.fise.xiaoyu.DB.entity.FamilyConcernEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 *  亲情人员身份
*/
public class FamilyConcernDao extends AbstractDao<FamilyConcernEntity, Long> {

    public static final String TABLENAME = "FamilyConcernInfo";

    /**
     * Properties of entity GroupEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");  
        public final static Property peeid = new Property(1, Long.class, "peeid", false, "PEEID"); 
        public final static Property identity = new Property(2, String.class, "identity", false, "IDENTITY"); 
        public final static Property avatar = new Property(3, String.class, "avatar", false, "AVATAR"); 
        public final static Property Phone = new Property(4, String.class, "Phone", false, "PHONE");
        public final static Property devId = new Property(5, Long.class, "devId", false, "DEVID");
        
    };


    public FamilyConcernDao(DaoConfig config) {
        super(config);
    }
    
    public FamilyConcernDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FamilyConcernInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id  
                "'PEEID' INTEGER NOT NULL ," + // 1: peeid 
                "'IDENTITY' TEXT NOT NULL ," + // 2: IDENTITY 
                "'AVATAR' TEXT NOT NULL ," + // 3: AVATAR 
                "'PHONE' TEXT NOT NULL ," + // 4: phone
                "'DEVID' INTEGER NOT NULL );"); // 5: DEVID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "WHITE TABLE " + (ifExists ? "IF EXISTS " : "") + "'FamilyConcernInfo'";
        db.execSQL(sql);
    }
 
    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FamilyConcernEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }  
        stmt.bindLong(2, entity.getPeeId()); 
        stmt.bindString(3, entity.getIdentity()); 
        stmt.bindString(4, entity.getAvatar()); 
        stmt.bindString(5, entity.getPhone()); 
        stmt.bindLong(6, entity.getDevId()); 
         
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

   
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FamilyConcernEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0)); 
        entity.setPeeId(cursor.getInt(offset + 1)); 
        entity.setIdentity(cursor.getString(offset + 2)); 
        entity.setAvatar(cursor.getString(offset + 3)); 
        entity.setPhone(cursor.getString(offset + 4)); 
        entity.setDevId(cursor.getInt(offset + 5)); 
        
     }
    
    
    /** @inheritdoc */
    @Override
    public FamilyConcernEntity readEntity(Cursor cursor, int offset) {
    	FamilyConcernEntity entity = new FamilyConcernEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id  
            cursor.getInt(offset + 1), // peeid 
            cursor.getString(offset + 2), // Identity 
            cursor.getString(offset + 3), // Avatar 
            cursor.getString(offset + 4), // phone 
            cursor.getInt(offset + 5) // dev 
        );
        return entity;
    }
     
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FamilyConcernEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FamilyConcernEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }


}
